#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

// TL
// ATTN: Refer to https://learnopengl.com/Lighting/Colors and https://learnopengl.com/Lighting/Basic-Lighting
// to familiarize yourself with implementing basic lighting model in OpenGL shaders

void main() {
	color = vs_vertexColor.rgb;

    float ambientStrength = 0.5;
	vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);

	vec3 lightDir = normalize(LightDirection_cameraspace);
	float diff = max(dot(normalize(Normal_cameraspace), lightDir), 0.0);
	vec3 diffuse = diff * vec3(1.0,1.0,1.0);

	float specularStrength = 0.05;
	vec3 reflectDir = reflect(-lightDir, normalize(Normal_cameraspace));
	float spec = pow(max(dot(normalize(EyeDirection_cameraspace), reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * vec3(1.0, 1.0, 1.0);

	color = (ambient + diffuse + specular) * vs_vertexColor.rgb;
}
