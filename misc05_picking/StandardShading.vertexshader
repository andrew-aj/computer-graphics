#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 vertexNormal;	// TL
layout(location = 3) in vec2 vertexUV;

// Output data; will be interpolated for each fragment.
out vec4 vs_vertexColor;
out vec2 uv;
flat out int useTex;

// Values that stay constant for the whole mesh.
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform bool useTexture;

void main() {
	gl_PointSize = 10.0;
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  P * V * M * vertexPosition_modelspace;
	
	vs_vertexColor = vertexColor;
    uv = vertexUV;
    if(useTexture) {
         useTex = 1;
    } else {
         useTex = 0;
    }
}
